// Generated by CoffeeScript 1.12.7
(function() {
  var BasicAuth, Client;

  BasicAuth = require("./basic_auth");

  Client = (function() {
    function Client(url) {
      this.transport = (url.protocol != null) && url.protocol === "https" ? require("https") : require("http");
      this.host = url.host;
      this.port = url.port;
      this.path = url.path;
    }

    Client.prototype.setAuth = function(auth) {
      this.auth = auth;
    };

    Client.prototype.setBasicAuth = function(username, password) {
      return this.setAuth(new BasicAuth(username, password));
    };

    Client.prototype.call = function(method, params, callback) {
      var options, query, request;
      request = {
        method: method,
        params: params
      };
      options = {
        host: this.host,
        port: this.port,
        method: "post",
        path: this.path,
        headers: {
          Host: this.host
        }
      };
      if (this.auth != null) {
        this.auth.sign(options, request);
      }
      query = JSON.stringify(request);
      options.headers['Content-Length'] = query.length;
      options.headers["Content-Type"] = "application/json";
      request = this.transport.request(options);
      request.on("error", function(err) {
        return callback(err);
      });
      request.on("response", function(response) {
        var buffer;
        buffer = '';
        response.on('data', function(chunk) {
          return buffer += chunk;
        });
        return response.on('end', function() {
          var e, err, json, msg;
          err = msg = null;
          if (response.statusCode === 200) {
            try {
              json = JSON.parse(buffer);
              if (json.error != null) {
                err = json.err;
              }
              if (json.result) {
                msg = json.result;
              }
            } catch (error) {
              e = error;
              err = e;
            }
          } else {
            err = "Server replied with : " + response.statusCode;
          }
          return callback(err, msg);
        });
      });
      return request.end(query);
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
